{"version":3,"file":"static/js/948.4bf9b699.chunk.js","mappings":"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","sources":["pages/account/Chat/TicketsButton.js","pages/account/Chat/Tickets.js","pages/account/Chat/TicketCard.js","pages/account/Chat/TicketsList.js","pages/account/Chat/Support.js"],"sourcesContent":["import React from 'react';\nimport styles from './Chat.module.css';\nimport {connect} from 'react-redux';\n\nconst TicketsButton = ({active_ticket = false, action}) => {\n\n  const handleClick = () => {\n    action(!active_ticket)\n  }\n\n  return (\n    <>\n      <div className={styles.tickets_button} onClick={handleClick}>\n        {active_ticket ? 'Закрыть заявку' : 'Открыть заявку'}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({})\nconst mapDispatchToProps = {}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TicketsButton)","import React, {useState, useEffect} from 'react';\nimport {connect} from \"react-redux\";\nimport styles from './Chat.module.css';\nimport Message from \"./Message\";\nimport avatar4 from \"./images/avatar4.png\";\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\nimport send from \"./images/send.svg\";\nimport MessageForm from \"./MessageForm\";\nimport {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread, set_new_ticket,\n} from \"../../../redux/actions/chatActions\";\nimport MessagesList from \"./MessagesList\";\nimport TicketsButton from \"./TicketsButton\";\n\nconst Tickets = ({\n                    current_ticket,\n                    set_current_messages,\n                    clear_current_messages,\n                    set_all_messages_read,\n                    set_all_messages_unread,\n                   set_new_ticket,\n                   all_tickets,\n                  }) => {\n\n  const [newTicket, setNewTicket] = useState(false)\n\n  const client = current_ticket ?\n    new W3CWebSocket(`wss://traveler.market/ws/chat/${current_ticket}/?token=${localStorage.getItem('access')}`)\n    :\n    null\n  ;\n\n  useEffect(() => {\n    return () => {\n      clear_current_messages()\n      client?.close()\n    }\n  })\n\n  useEffect(() => {\n    if (client) {\n      client.onopen = () => {\n        console.log('WebSocket Client Connected');\n      };\n\n      client.onclose = () => {\n        console.log('WebSocket Client Disconnected');\n      };\n\n      client.onerror = (e) => {\n        console.error(e);\n        console.log('Connection Error');\n      };\n\n      client.onmessage = (e) => {\n        const dataFromServer = JSON.parse(e.data);\n        // console.log('got reply!');\n        if (dataFromServer) {\n          if (dataFromServer?.command === 'set_read') {\n            set_all_messages_read()\n          } else if (dataFromServer?.command === 'set_unread') {\n            set_all_messages_unread()\n          } else {\n            set_current_messages(dataFromServer)\n          }\n        }\n      };\n    }\n  }, [client])\n\n  // console.log(current_room)\n\n\n  const handleSend = (message) => {\n    set_new_ticket({\n      text: message\n    })\n\n    // set_current_messages({\n    //   author:\n    //     {\n    //       id: user.id,\n    //       avatar: user.avatar\n    //     },\n    //   message: message,\n    //   time_date: Date.now(),\n    // })\n  }\n\n  return (\n    <>\n      <div className={styles.chat_messages}>\n        {current_ticket?.status !== 3 && <TicketsButton action={setNewTicket} active_ticket={newTicket}/>}\n        <MessagesList/>\n        <div className={styles.send_button}>\n          {newTicket && <MessageForm action={handleSend}/>}\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  all_tickets: state.chat.all_tickets,\n  archive_tickets: state.chat.archive_tickets,\n  current_ticket: state.chat.current_ticket,\n})\n\nconst mapDispatchToProps = {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread,\n  set_new_ticket,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tickets)","import React, {useEffect} from 'react';\nimport styles from './Chat.module.css';\nimport wallpaper from \"../../Blog/images/wallpaper.png\";\nimport {truncateText} from \"../../../functions\";\nimport {connect} from \"react-redux\";\nimport {set_users_online} from \"../../../redux/actions/chatActions\";\n\nconst TicketCard = ({ticket, action, active = false, first = false, users_online, set_users_online, }) => {\n\n  const {\n    id,\n    last_message,\n    status,\n    staff\n  } = ticket\n\n  // const {\n  //   avatar,\n  //   first_name,\n  //   last_name,\n  //   last_message_date,\n  //   is_online,\n  // } = room.room_members[0]\n  //\n  // const user_id = room.room_members[0].id\n\n  // useEffect(() => {\n  //   if(is_online && user_id){\n  //     set_users_online(user_id)\n  //   }\n  // }, [is_online, user_id])\n  //\n  // console.log(user_id)\n\n  const handleClick = () => {\n    action(id)\n  }\n\n  return (\n    <>\n      <div className={`${styles.chat_contact_card} ${active ? styles.active : ''} ${first ? styles.first : ''}`} onClick={handleClick}>\n        <div className={styles.chat_contact_wrapper}>\n          {/*<div className={`${styles.chat_contact_avatar}${users_online?.includes(user_id) ? ' ' + styles.active_user : ''}`} style={{backgroundImage: `url(${avatar})`}}/>*/}\n          <div className={styles.chat_contact_data}>\n            <div className={styles.chat_contact_name}>{`Сотрудник #${staff}`}</div>\n            <div className={styles.chat_contact_last_message}>{truncateText(last_message, 20)}</div>\n          </div>\n        </div>\n        {/*<div className={styles.chat_contact_last_message_date}>{last_message_date}</div>*/}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  users_online: state.chat.users_online\n})\n\nexport default connect(mapStateToProps, {set_users_online})(TicketCard)","import React from 'react';\nimport styles from './Chat.module.css';\nimport ContactCard from \"./ContactCard\";\nimport {connect} from \"react-redux\";\nimport {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread, set_current_ticket,\n} from \"../../../redux/actions/chatActions\";\nimport TicketCard from \"./TicketCard\";\n\nconst TicketsList = ({\n                       all_tickets,\n                        chat_rooms,\n                        current_room,\n                        set_current_room,\n                        delete_chat_user,\n                        clear_current_room,\n                        set_all_messages_unread,\n                       set_current_ticket,\n                       current_ticket,\n                      }) => {\n  const handleCurrentTicket = (id) => {\n    set_current_ticket(id)\n  }\n  return (\n    <>\n      <div className={styles.chat_contacts}>\n        {all_tickets?.map((i, n) => <TicketCard key={n} ticket={i} action={handleCurrentTicket}\n                                                         active={current_ticket === i.id} first={n === 0}/>)}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  all_tickets: state.chat.all_tickets,\n  current_ticket: state.chat.current_ticket,\n})\n\nexport default connect(mapStateToProps, {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread,\n  set_current_ticket,\n})(TicketsList);","import React, {useEffect} from 'react';\nimport styles from './Chat.module.css';\nimport {connect} from 'react-redux';\nimport ContactsList from \"./ContactsList\";\nimport Messages from \"./Messages\";\nimport Account from \"../../../layouts/account/account\";\nimport Tickets from \"./Tickets\";\nimport TicketsList from \"./TicketsList\";\nimport {get_all_tickets} from \"../../../redux/actions/chatActions\";\n\nconst Support = ({get_all_tickets}) => {\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  useEffect(() => {\n    get_all_tickets()\n    return () => {\n      // delete_chat_user()\n      // clear_current_room()\n      // set_all_messages_unread()\n    }\n  }, [])\n\n  return (\n    <>\n      <Account title='Поддержка' menu_item='support'>\n\n        <div className={styles.chat_wrapper}>\n          <TicketsList/>\n          <Tickets/>\n        </div>\n\n      </Account>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({})\nconst mapDispatchToProps = {get_all_tickets}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Support)"],"names":["connect","state","active_ticket","action","className","styles","onClick","mapDispatchToProps","set_current_messages","clear_current_messages","set_all_messages_read","set_all_messages_unread","set_new_ticket","all_tickets","chat","archive_tickets","current_ticket","useState","newTicket","setNewTicket","client","W3CWebSocket","localStorage","getItem","useEffect","close","onopen","console","log","onclose","onerror","e","error","onmessage","dataFromServer","JSON","parse","data","command","status","MessagesList","MessageForm","message","text","users_online","set_users_online","ticket","active","first","id","last_message","staff","truncateText","set_current_room","delete_chat_user","clear_current_room","set_current_ticket","chat_rooms","current_room","handleCurrentTicket","map","i","n","get_all_tickets","window","scrollTo","title","menu_item"],"sourceRoot":""}