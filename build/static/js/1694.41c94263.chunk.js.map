{"version":3,"file":"static/js/1694.41c94263.chunk.js","mappings":"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","sources":["pages/account/Chat/Message.js","pages/account/Chat/MessageForm.js","pages/account/Chat/MessagesList.js","pages/account/Chat/Messages.js","pages/account/Chat/ContactCard.js","pages/account/Chat/ContactsList.js","pages/account/Chat/Chat.js","pages/account/Chat/index.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport styles from './Chat.module.css';\nimport read from './images/read.svg'\nimport read_not from './images/read_not.svg'\nimport {connect} from \"react-redux\";\nimport IsRead from \"./IsRead\";\n\nconst Message = ({\n                   data,\n                   author,\n                   user_id,\n                 }) => {\n\n  const [isMine, setIsMine] = useState(false)\n\n  useEffect(() => {\n    if(author?.id === user_id) {\n      setIsMine(true)\n    }\n  }, [author])\n\n  return (\n    <>\n      <div className={`${styles.message_wrapper} ${isMine ? styles.is_mine : ''}`}>\n        <div className={styles.user_avatar} style={{backgroundImage: `url(${author?.avatar})`}}/>\n        <div className={styles.message_body}>\n          <div className={styles.message_header}>\n            <div className={styles.message_author_name}>{isMine ? 'Вы' : author?.first_name + ' ' + author?.last_name}</div>\n            <div className={styles.message_date_time}>{data.created_at}</div>\n            {isMine && <IsRead is_read={data.is_read}/>}\n          </div>\n          <div className={styles.message_text} dangerouslySetInnerHTML={{__html: data.message.replace(/\\n/g, \"<br />\")}}/>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Message","import React, {useEffect, useRef, useState} from 'react';\nimport styles from './Chat.module.css';\nimport send from \"./images/send.svg\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst MessageForm = ({action}) => {\n\n  const textareaRef = useRef()\n  const formRef = useRef()\n\n  const [message, setMessage] = useState('')\n\n  const handleSend = (e) => {\n    if(message) {\n      e.preventDefault();\n      action(message)\n      setMessage('')\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  const handleMessageEdit = (e) => {\n    setMessage(e.target.value)\n  }\n\n  const onEnterPress = (e) => {\n    if(e.keyCode === 13 && e.shiftKey === false) {\n      handleSend(e)\n    }\n  }\n\n  return (\n    <>\n      <form ref={formRef} onSubmit={handleSend}>\n        {/*<div ref={ref} className={styles.editable_area} contentEditable=\"true\" onChange={(e) => console.log(e.target)}/>*/}\n        <TextareaAutosize ref={textareaRef}  placeholder='Текст сообщения' onChange={handleMessageEdit} onKeyDown={onEnterPress} value={message} maxRows={3}/>\n        {/*<textarea ref={textareaRef} placeholder='Текст сообщения' onChange={handleMessageEdit} value={message}/>*/}\n        <button type='submit'><img src={send} alt=\"\"/></button>\n      </form>\n    </>\n  );\n};\n\nexport default MessageForm;","import React, {useEffect, useRef} from 'react';\nimport styles from './Chat.module.css';\nimport Message from \"./Message\";\nimport {connect} from \"react-redux\";\n\nconst MessagesList = ({current_messages, user}) => {\n\n  const scrollRef = useRef(null);\n\n  // useEffect(() => {\n  //   scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  // }, [current_messages]);\n\n  useEffect(() => {\n    if (scrollRef) {\n      scrollRef.current.addEventListener('DOMNodeInserted', event => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\n      });\n    }\n  }, [current_messages]);\n\n  return (\n    <>\n      <div ref={scrollRef} className={styles.chat_messages_messages}>\n        {current_messages?.map((i, n) => <Message key={n} data={i} author={i.author} user_id={user.id}/>)}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  current_messages: state.chat.current_messages,\n})\n\nexport default connect(mapStateToProps)(MessagesList)","import React, {useState, useEffect} from 'react';\nimport {connect} from \"react-redux\";\nimport styles from './Chat.module.css';\nimport Message from \"./Message\";\nimport avatar4 from \"./images/avatar4.png\";\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\nimport send from \"./images/send.svg\";\nimport MessageForm from \"./MessageForm\";\nimport {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\nimport MessagesList from \"./MessagesList\";\n\nconst Messages = ({\n                    current_room,\n                    set_current_messages,\n                    clear_current_messages,\n                    set_all_messages_read,\n                    set_all_messages_unread,\n                  }) => {\n\n  const client = current_room ?\n    new W3CWebSocket(`wss://traveler.market/ws/chat/${current_room}/?token=${localStorage.getItem('access')}`)\n    :\n    null\n  ;\n\n  useEffect(() => {\n    return () => {\n      clear_current_messages()\n      client?.close()\n    }\n  })\n\n  useEffect(() => {\n    if (client) {\n      client.onopen = () => {\n        console.log('WebSocket Client Connected');\n      };\n\n      client.onclose = () => {\n        console.log('WebSocket Client Disconnected');\n      };\n\n      client.onerror = (e) => {\n        console.error(e);\n        console.log('Connection Error');\n      };\n\n      client.onmessage = (e) => {\n        const dataFromServer = JSON.parse(e.data);\n        // console.log('got reply!');\n        if (dataFromServer) {\n          if (dataFromServer?.command === 'set_read') {\n            set_all_messages_read()\n          } else if (dataFromServer?.command === 'set_unread') {\n            set_all_messages_unread()\n          } else {\n            set_current_messages(dataFromServer)\n          }\n        }\n      };\n    }\n  }, [client])\n\n  // console.log(current_room)\n\n\n  const handleSend = (message) => {\n    client.send(JSON.stringify({\n      message: message\n    }));\n  }\n\n  return (\n    <>\n      <div className={styles.chat_messages}>\n        <MessagesList/>\n        <div className={styles.send_button}>\n          <MessageForm action={handleSend}/>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  chat_rooms: state.chat.chat_rooms,\n  current_room: state.chat.current_room,\n})\n\nconst mapDispatchToProps = {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages)","import React, {useEffect} from 'react';\nimport styles from './Chat.module.css';\nimport wallpaper from \"../../Blog/images/wallpaper.png\";\nimport {truncateText} from \"../../../functions\";\nimport {connect} from \"react-redux\";\nimport {set_users_online} from \"../../../redux/actions/chatActions\";\n\nconst ContactCard = ({room, action, active = false, first = false, users_online, set_users_online, }) => {\n\n  const {\n    id,\n    last_message,\n  } = room\n\n  const {\n    avatar,\n    first_name,\n    last_name,\n    last_message_date,\n    is_online,\n  } = room.room_members[0]\n\n  const user_id = room.room_members[0].id\n\n  useEffect(() => {\n    if(is_online && user_id){\n      set_users_online(user_id)\n    }\n  }, [is_online, user_id])\n\n  console.log(user_id)\n\n  const handleClick = () => {\n    action(id)\n  }\n\n  return (\n    <>\n      <div className={`${styles.chat_contact_card} ${active ? styles.active : ''} ${first ? styles.first : ''}`} onClick={handleClick}>\n        <div className={styles.chat_contact_wrapper}>\n          <div className={`${styles.chat_contact_avatar}${users_online?.includes(user_id) ? ' ' + styles.active_user : ''}`} style={{backgroundImage: `url(${avatar})`}}/>\n          <div className={styles.chat_contact_data}>\n            <div className={styles.chat_contact_name}>{first_name + ' ' + last_name[0]}</div>\n            <div className={styles.chat_contact_last_message}>{truncateText(room?.last_message, 20)}</div>\n          </div>\n        </div>\n        <div className={styles.chat_contact_last_message_date}>{last_message_date}</div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  users_online: state.chat.users_online\n})\n\nexport default connect(mapStateToProps, {set_users_online})(ContactCard)","import React from 'react';\nimport styles from './Chat.module.css';\nimport ContactCard from \"./ContactCard\";\nimport {connect} from \"react-redux\";\nimport {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\n\nconst ContactsList = ({\n                        chat_rooms,\n                        current_room,\n                        set_current_room,\n                        delete_chat_user,\n                        clear_current_room,\n                        set_all_messages_unread,\n                      }) => {\n  const handleCurrentRoom = (id) => {\n    delete_chat_user()\n    clear_current_room()\n    set_all_messages_unread()\n    set_current_room(id)\n  }\n  return (\n    <>\n      <div className={styles.chat_contacts}>\n        {chat_rooms?.map((i, n) => <ContactCard key={n} room={i} action={handleCurrentRoom}\n                                                active={current_room === i.id} first={n === 0}/>)}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  chat_rooms: state.chat.chat_rooms,\n  current_room: state.chat.current_room,\n})\n\nexport default connect(mapStateToProps, {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread,\n})(ContactsList);","import React, {useEffect, useRef, useState} from 'react'\nimport styles from './Chat.module.css'\nimport {connect} from 'react-redux'\nimport Account from \"../../../layouts/account/account\";\nimport {\n  clear_current_room,\n  delete_chat_user,\n  get_chat_rooms,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\nimport Messages from \"./Messages\";\nimport ContactsList from \"./ContactsList\";\n\nconst Chat = ({get_chat_rooms, delete_chat_user, clear_current_room, set_all_messages_unread}) => {\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  useEffect(() => {\n    get_chat_rooms()\n    return () => {\n      delete_chat_user()\n      clear_current_room()\n      set_all_messages_unread()\n    }\n  }, [])\n\n  return (\n    <>\n      <Account title='Чат' menu_item='chat'>\n\n        <div className={styles.chat_wrapper}>\n          <ContactsList/>\n          <Messages/>\n        </div>\n\n      </Account>\n    </>\n  )\n}\n\nconst mapDispatchToProps = {get_chat_rooms, delete_chat_user, clear_current_room, set_all_messages_unread}\n\nexport default connect(null, mapDispatchToProps)(Chat)","import Chat from './Chat'\n\nexport default Chat"],"names":["data","author","user_id","useState","isMine","setIsMine","useEffect","id","className","styles","style","backgroundImage","avatar","first_name","last_name","created_at","IsRead","is_read","dangerouslySetInnerHTML","__html","message","replace","action","textareaRef","useRef","formRef","setMessage","handleSend","e","preventDefault","ref","onSubmit","placeholder","onChange","target","value","onKeyDown","keyCode","shiftKey","maxRows","type","src","send","alt","connect","state","user","auth","current_messages","chat","scrollRef","current","addEventListener","event","currentTarget","scroll","top","scrollHeight","behavior","map","i","n","mapDispatchToProps","set_current_messages","clear_current_messages","set_all_messages_read","set_all_messages_unread","chat_rooms","current_room","client","W3CWebSocket","localStorage","getItem","close","onopen","console","log","onclose","onerror","error","onmessage","dataFromServer","JSON","parse","command","stringify","users_online","set_users_online","room","active","first","last_message","room_members","last_message_date","is_online","onClick","includes","truncateText","set_current_room","delete_chat_user","clear_current_room","handleCurrentRoom","get_chat_rooms","window","scrollTo","title","menu_item"],"sourceRoot":""}