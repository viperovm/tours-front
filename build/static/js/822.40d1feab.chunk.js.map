{"version":3,"file":"static/js/822.40d1feab.chunk.js","mappings":"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","sources":["pages/account/Chat/MessageForm.js","pages/account/Chat/MessagesList.js","pages/account/Chat/Messages.js","pages/account/Chat/ContactCard.js","pages/account/Chat/ContactsList.js","pages/account/Chat/Chat.js","pages/account/Chat/index.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport styles from './Chat.module.css';\nimport send from \"./images/send.svg\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\nconst MessageForm = ({action}) => {\n\n  const textareaRef = useRef()\n\n  const textareaElement = textareaRef.current;\n\n  const handleSend = (e) => {\n    e.preventDefault();\n    action(message)\n    setMessage('')\n  }\n\n  // useEffect(() => {\n  //   const listener = (event) => {\n  //     if ((event.code === \"Enter\" || event.code === \"NumpadEnter\") && event.metaKey) {\n  //       console.log(message)\n  //       handleSend(event)\n  //     }\n  //   };\n  //   if (textareaElement) {\n  //     document.addEventListener(\"keydown\", listener);\n  //   }\n  //   return () => {\n  //     if (textareaElement) {\n  //       document.removeEventListener(\"keydown\", listener);\n  //     }\n  //   };\n  // }, [textareaElement]);\n\n  const [message, setMessage] = useState('')\n\n  const handleMessageEdit = (e) => {\n    setMessage(e.target.value)\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSend}>\n        {/*<div ref={ref} className={styles.editable_area} contentEditable=\"true\" onChange={(e) => console.log(e.target)}/>*/}\n        <TextareaAutosize ref={textareaRef}  placeholder='Текст сообщения' onChange={handleMessageEdit} value={message} maxRows={3}/>\n        {/*<textarea ref={textareaRef} placeholder='Текст сообщения' onChange={handleMessageEdit} value={message}/>*/}\n        <button type='submit'><img src={send} alt=\"\"/></button>\n      </form>\n    </>\n  );\n};\n\nexport default MessageForm;","import React, {useEffect, useRef} from 'react';\nimport styles from './Chat.module.css';\nimport Message from \"./Message\";\nimport {connect} from \"react-redux\";\n\nconst MessagesList = ({current_messages, user}) => {\n\n  const scrollRef = useRef(null);\n\n  // useEffect(() => {\n  //   scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  // }, [current_messages]);\n\n  useEffect(() => {\n    if (scrollRef) {\n      scrollRef.current.addEventListener('DOMNodeInserted', event => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\n      });\n    }\n  }, [current_messages]);\n\n  return (\n    <>\n      <div ref={scrollRef} className={styles.chat_messages_messages}>\n        {current_messages?.map((i, n) => <Message key={n} data={i} author={i.author} user_id={user.id}/>)}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  user: state.auth.user,\n  current_messages: state.chat.current_messages,\n})\n\nexport default connect(mapStateToProps)(MessagesList)","import React, {useState, useEffect} from 'react';\nimport {connect} from \"react-redux\";\nimport styles from './Chat.module.css';\nimport Message from \"./Message\";\nimport avatar4 from \"./images/avatar4.png\";\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\nimport send from \"./images/send.svg\";\nimport MessageForm from \"./MessageForm\";\nimport {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\nimport MessagesList from \"./MessagesList\";\n\nconst Messages = ({\n                    current_room,\n                    set_current_messages,\n                    clear_current_messages,\n                    set_all_messages_read,\n                    set_all_messages_unread,\n                  }) => {\n\n  const client = current_room ?\n    new W3CWebSocket(`wss://traveler.market/ws/chat/${current_room}/?token=${localStorage.getItem('access')}`)\n    :\n    null\n  ;\n\n  useEffect(() => {\n    return () => {\n      clear_current_messages()\n      client?.close()\n    }\n  })\n\n  useEffect(() => {\n    if (client) {\n      client.onopen = () => {\n        console.log('WebSocket Client Connected');\n      };\n\n      client.onclose = () => {\n        console.log('WebSocket Client Disconnected');\n      };\n\n      client.onerror = (e) => {\n        console.error(e);\n        console.log('Connection Error');\n      };\n\n      client.onmessage = (e) => {\n        const dataFromServer = JSON.parse(e.data);\n        // console.log('got reply!');\n        if (dataFromServer) {\n          if (dataFromServer?.command === 'set_read') {\n            set_all_messages_read()\n          } else if (dataFromServer?.command === 'set_unread') {\n            set_all_messages_unread()\n          } else {\n            set_current_messages(dataFromServer)\n          }\n        }\n      };\n    }\n  }, [client])\n\n  // console.log(current_room)\n\n\n  const handleSend = (message) => {\n    client.send(JSON.stringify({\n      message: message\n    }));\n  }\n\n  return (\n    <>\n      <div className={styles.chat_messages}>\n        <MessagesList/>\n        <div className={styles.send_button}>\n          <MessageForm action={handleSend}/>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  chat_rooms: state.chat.chat_rooms,\n  current_room: state.chat.current_room,\n})\n\nconst mapDispatchToProps = {\n  set_current_messages,\n  clear_current_messages,\n  set_all_messages_read,\n  set_all_messages_unread,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages)","import React, {useEffect} from 'react';\nimport styles from './Chat.module.css';\nimport wallpaper from \"../../Blog/images/wallpaper.png\";\nimport {truncateText} from \"../../../functions\";\nimport {connect} from \"react-redux\";\nimport {set_users_online} from \"../../../redux/actions/chatActions\";\n\nconst ContactCard = ({room, action, active = false, first = false, users_online, set_users_online, }) => {\n\n  const {\n    id,\n    last_message,\n  } = room\n\n  const {\n    avatar,\n    first_name,\n    last_name,\n    last_message_date,\n    is_online,\n  } = room.room_members[0]\n\n  const user_id = room.room_members[0].id\n\n  useEffect(() => {\n    if(is_online && user_id){\n      set_users_online(user_id)\n    }\n  }, [is_online, user_id])\n\n  console.log(user_id)\n\n  const handleClick = () => {\n    action(id)\n  }\n\n  return (\n    <>\n      <div className={`${styles.chat_contact_card} ${active ? styles.active : ''} ${first ? styles.first : ''}`} onClick={handleClick}>\n        <div className={styles.chat_contact_wrapper}>\n          <div className={`${styles.chat_contact_avatar}${users_online?.includes(user_id) ? ' ' + styles.active_user : ''}`} style={{backgroundImage: `url(${avatar})`}}/>\n          <div className={styles.chat_contact_data}>\n            <div className={styles.chat_contact_name}>{first_name + ' ' + last_name[0]}</div>\n            <div className={styles.chat_contact_last_message}>{truncateText(room?.last_message, 20)}</div>\n          </div>\n        </div>\n        <div className={styles.chat_contact_last_message_date}>{last_message_date}</div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  users_online: state.chat.users_online\n})\n\nexport default connect(mapStateToProps, {set_users_online})(ContactCard)","import React from 'react';\nimport styles from './Chat.module.css';\nimport ContactCard from \"./ContactCard\";\nimport {connect} from \"react-redux\";\nimport {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\n\nconst ContactsList = ({\n                        chat_rooms,\n                        current_room,\n                        set_current_room,\n                        delete_chat_user,\n                        clear_current_room,\n                        set_all_messages_unread,\n                      }) => {\n  const handleCurrentRoom = (id) => {\n    delete_chat_user()\n    clear_current_room()\n    set_all_messages_unread()\n    set_current_room(id)\n  }\n  return (\n    <>\n      <div className={styles.chat_contacts}>\n        {chat_rooms?.map((i, n) => <ContactCard key={n} room={i} action={handleCurrentRoom}\n                                                active={current_room === i.id} first={n === 0}/>)}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  chat_rooms: state.chat.chat_rooms,\n  current_room: state.chat.current_room,\n})\n\nexport default connect(mapStateToProps, {\n  set_current_room,\n  delete_chat_user,\n  clear_current_room,\n  set_all_messages_unread,\n})(ContactsList);","import React, {useEffect, useRef, useState} from 'react'\nimport styles from './Chat.module.css'\nimport {connect} from 'react-redux'\nimport Account from \"../../../layouts/account/account\";\nimport {\n  clear_current_room,\n  delete_chat_user,\n  get_chat_rooms,\n  set_all_messages_unread,\n} from \"../../../redux/actions/chatActions\";\nimport Messages from \"./Messages\";\nimport ContactsList from \"./ContactsList\";\n\nconst Chat = ({get_chat_rooms, delete_chat_user, clear_current_room, set_all_messages_unread}) => {\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  useEffect(() => {\n    get_chat_rooms()\n    return () => {\n      delete_chat_user()\n      clear_current_room()\n      set_all_messages_unread()\n    }\n  }, [])\n\n  return (\n    <>\n      <Account title='Чат' menu_item='chat'>\n\n        <div className={styles.chat_wrapper}>\n          <ContactsList/>\n          <Messages/>\n        </div>\n\n      </Account>\n    </>\n  )\n}\n\nconst mapDispatchToProps = {get_chat_rooms, delete_chat_user, clear_current_room, set_all_messages_unread}\n\nexport default connect(null, mapDispatchToProps)(Chat)","import Chat from './Chat'\n\nexport default Chat"],"names":["action","textareaRef","useRef","current","useState","message","setMessage","onSubmit","e","preventDefault","ref","placeholder","onChange","target","value","maxRows","type","src","send","alt","connect","state","user","auth","current_messages","chat","scrollRef","useEffect","addEventListener","event","currentTarget","scroll","top","scrollHeight","behavior","className","styles","map","i","n","Message","data","author","user_id","id","mapDispatchToProps","set_current_messages","clear_current_messages","set_all_messages_read","set_all_messages_unread","chat_rooms","current_room","client","W3CWebSocket","localStorage","getItem","close","onopen","console","log","onclose","onerror","error","onmessage","dataFromServer","JSON","parse","command","stringify","users_online","set_users_online","room","active","first","last_message","room_members","avatar","first_name","last_name","last_message_date","is_online","onClick","includes","style","backgroundImage","truncateText","set_current_room","delete_chat_user","clear_current_room","handleCurrentRoom","get_chat_rooms","window","scrollTo","title","menu_item"],"sourceRoot":""}